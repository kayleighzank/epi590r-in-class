---
title: "2.4 Functions"
format: html
editor: visual
---

## 2.4 Exercises

1.  Create a new R script or quarto file and write a function to square a number. You’re tired of writing `x^2` when you want to square `x`, so you want a function to square a number. You can call it `square()`. I showed this in the slides, now try on your own!

```{r}
y <- c(1, 3, 5, 7, 9)

new_mean <- function(x) {
	n <- length(x)
	mean_val <- sum(x)/n
	return(mean_val)
}

new_mean(y)
mean(y)
```

```{r}
x <- 4

x^2

square <- function (x) {x^2}
	
square(x)
square(53)
53^2
```

```{r}
add_two_numbers <- function(x,y) {
	x+y
}

add_two_numbers(4, 6)
add_two_numbers(x = 4, y = 6)
```

```{r}
log_transform <- function(x) {
	log(x)
}

log_transform(y)
log(y)
```

```{r}
reciprocal <- function(x) {
	1/x
}

y
reciprocal(y)
```

```{r}
z <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

clean <- function(x) {
	x1 <- x/2
	x2 <- floor(x1)
	return(x2)
}

clean(z)
```

## 2.5 Exercises

```{r}
prop <- function(x, multiplier) {
	n <- length(x)
	mean_val <- multiplier * sum(x) / n
	return(mean_val)
}

q <- c(1, 0, 1, 0)

prop(q, 1)
prop(q, 100)
```

```{r}
prop <- function(x, multiplier = 1) {
	n <- length(x)
	mean_val <- multiplier * sum(x) / n
	return(mean_val)
}

prop(c(0,1,1,1))
prop(c(0,1,1,1), 100)
```

1.  Write a function to raise to any power. You don’t just want to square numbers, you want to raise them to higher powers too. Make a function that uses two arguments, `x` for a number, and `power` for the power. Call it `raise()`.

```{r}
raise <- function(x, power) {
	x^power
}

raise(x = 2, power = 4)
2^4
```

2.  Change your `raise()` function to default to squaring `x` when the user doesn’t enter a value for `power`.

```{r}
raise <- function(x, power = 2) {
	x^power
}

raise(x = 5)
raise(x = 5, power = 3)
```

## 2.6 Exercises

1.  Create a function that takes a vector of numbers and returns the standard deviation manually (like we did the mean). Use `if` statements to check if the vector has only one (or fewer) elements and return `NA` if so. (Hint: the `length()` function will be helpful!) You don’t need any extra arguments besides the vector of numbers.

```{r}

b <- c(2343, 2453, 2346, 1243)

num <- sum((b[1:length(b)] - mean(b))^2)
denom <- length(b) - 1
sqrt(num/denom)
sd(b)

standard_dev <- function(x) {
	num <- sum((x[1:length(x)] - mean(x))^2)
denom <- length(x) - 1
sd <- sqrt(num/denom)
if (length(x) <= 0) {
	sd <- NA
} else{
	sd <- sd
}
return(sd)
}

a <- c(103, 151, 133, 104, 144, 162, 111)

standard_dev(a)
sd(a)

standard_dev(x)
sd(x)
```

2.  Modify your function to remove the NA values before calculating the standard deviation. (Hint: the `na.omit()` function will be helpful!) Add an argument `na.rm =` that defaults to `TRUE` (the *opposite* of the `na.rm` argument in the built-in R function `sd()`). If `na.rm = FALSE`, then the function should return `NA` if there are any NA values in the vector.

```{r}
standard_dev <- function(x, na.rm = TRUE) {
	if (na.rm == TRUE) {
	x <- na.omit(x)
} else{
	x
}
	num <- sum((x[1:length(x)] - mean(x))^2)
	denom <- length(x) - 1
	sd <- sqrt(num/denom)
return(sd)
}

c <- c(a, NA)
c	

standard_dev(c)
sd(c, na.rm = TRUE)
standard_dev(c, na.rm = FALSE)
sd(c)

```

3.  What is the standard deviation of income in (all of) NLSY? Compare with the built-in R function `sd()`.

```{r}

```
